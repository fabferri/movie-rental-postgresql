-- create the db movies only if it doesn't exist
SELECT 'CREATE DATABASE movies'
WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'movies')\gexec 

-- connected to the database movies
\c movies

DROP TABLE IF EXISTS moviePayment CASCADE;
CREATE TABLE IF NOT EXISTS moviePayment
( payment_id  INT PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
  customer_id   INT NOT NULL REFERENCES customer (customer_id),
  movie_id      INT NOT NULL REFERENCES movie (movie_id),
  transation_id  NUMERIC NULL,
  amount        NUMERIC NULL,
  expire_date   DATE NULL CHECK (expire_date > '1970-01-01'),
  rent_date     DATE NULL CHECK (rent_date > '1970-01-01')
);

DO $$
DECLARE 
   maxVal integer := 50;
   minVal integer  := 5;
BEGIN 
   FOR i IN 1..1000 LOOP
      INSERT INTO moviePayment(customer_id,movie_id, amount, expire_date)
      VALUES 
        ( (SELECT customer_id FROM customer ORDER BY random() Limit 1),
          (SELECT movie_id FROM movie ORDER BY random() Limit 1),
           ROUND( (random()* (maxVal-minVal + 1) + minVal)::numeric , 2) ,
           NOW()::timestamp - ('1 year'::INTERVAL * ROUND(RANDOM() * 5))
        );
   END LOOP;
END $$;

-- add a renting date with date before the expiration
UPDATE moviePayment 
SET rent_date = expire_date - '1 day'::INTERVAL * ROUND(RANDOM() * 30)
WHERE expire_date IS NOT NULL;










-- select MAX(customer_Id ),MIN(customer_Id ) from tmp_customerId;
-- select MAX(movie_Id ), MIN(movie_Id ) from tmp_movieId;