-- create the db movies only if it doesn't exist
SELECT 'CREATE DATABASE movies'
WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'movies')\gexec 

-- connected to the database movies
\c movies

DROP TABLE IF EXISTS customer CASCADE;
CREATE TABLE IF NOT EXISTS customer(
   customer_id     INT PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
   firstname       VARCHAR(50),
   lastname        VARCHAR(50) NOT NULL,
   address         VARCHAR(30),
   zip             VARCHAR(15),
   city            VARCHAR(30),
   country         VARCHAR(20)
);

DROP TABLE IF EXISTS creditcard CASCADE;
CREATE TABLE IF NOT EXISTS creditcard(
   creditcard_id   INT PRIMARY KEY NOT NULL,
   customer_id     INT NOT NULL REFERENCES customer (customer_id),
   creditcard      VARCHAR(20) NOT NULL,
   creditcard_expiredate  DATE CHECK (creditcard_expiredate > '1900-01-01')
);


-- drop table movie if exists 
-- create a new table movie 
DROP TABLE IF EXISTS movie CASCADE;
CREATE TABLE IF NOT EXISTS movie(
   movie_id         INT PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
   title            TEXT NOT NULL,
   released_year    INT,
   origincountry    CHAR(50),
   language         CHAR(10),
   genres_id        INT,
   description      VARCHAR(255),
   note             VARCHAR(255)
);


-- drop table orderMovie if exists 
-- create a new table orderMovie 
DROP TABLE IF EXISTS movieRole CASCADE;
CREATE TABLE IF NOT EXISTS movieRole(
   role_id         INT PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
   movie_id         INT NOT NULL,
   firstname        CHAR(30),
   lastname         CHAR(30) NOT NULL,
   creditcard_id    INT NOT NULL
);



DROP TABLE IF EXISTS movieRating CASCADE;
CREATE TABLE IF NOT EXISTS movieRating(
   movie_id  INT PRIMARY KEY  NOT NULL REFERENCES movie (movie_id),
   rate      smallint,
   num_rate  smallint
); 

DROP TABLE IF EXISTS movieRole CASCADE;
CREATE TABLE IF NOT EXISTS movieRole(
   role_id   INT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
   firstname VARCHAR(30),
   lastname  VARCHAR(30),
   role      VARCHAR(20)
);

DROP TABLE IF EXISTS movieCast;
CREATE TABLE IF NOT EXISTS movieCast(   
   movie_id    INT NOT NULL,
   role_id     INT NOT NULL
);

DROP TABLE IF EXISTS movieGenres CASCADE;
CREATE TABLE IF NOT EXISTS movieGenres(
   genres_id INT PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
   genres     VARCHAR(20)
);



INSERT INTO movieGenres 
VALUES 
(1,'science fiction' ),
(2,'horror'),
(3,'western'),
(4,'adventure'),
(5,'drama'),
(6,'action'),
(7,'romantic'),
(8,'thriller'),
(9,'crime'),
(10,'animation'),
(11,'fantasy'),
(12,'historical'),
(13,'war'),
(14,'biographical'),
(15,'espionage'),
(16,'superhero'),
(17,'comedy'),
(18,'epic');

INSERT INTO movie(title, released_year, origincountry, language, genres_id, description, note)
VALUES
('2001: A Space Odyssey', 1968, 'US', 'ENG', 1, 'science fiction', 'classic sf'),
('Solaris', 1972, 'URSS', 'ENG', 1, 'science fiction', 'classic sf'),
('C''era una volta il west', 1968, 'IT', 'IT', 3, 'western', 'western'),
('For a Few Dollars More',1965,'IT, Spain', 'IT', 3,'Starring Clint Eastwood,Lee Van Cleef, Gian Maria Volonté','Directed by Sergio Leone'),
('The Good, the Bad and the Ugly', 1966, 'IT', 'IT', 3,'','irected by Sergio Leone'),
('The Rock',1996, 'US','ENG',6,'Pentagon assigns a team comprising an FBI chemist and a former SAS captain with a team of SEALs to break into Alcatraz, where a rogue general and a rogue group of Marines have seized all the tourists on the island',''),
('The Name of the Rose',1986, 'IT,GE,FR', 'IT', 8, 'century Franciscan monk William of Baskerville and his young novice arrive at a conference to find that several monks have been murdered under mysterious circumstances', ''),
('Zardoz',1974, 'UK,US', 'EN', 1, '', 'Directed by	John Boorman'),
('The Fellowship of the Ring', 2001, 'US', 'EN', 11, 'The Lord of the Rings', 'Directed by Peter Jackson'),
('The Two Towers ', 2002, 'US', 'EN', 11, 'The Lord of the Rings', ''),
('The Return of the King ', 2003, 'US', 'EN', 11, 'The Lord of the Rings', ''),
('The Godfather', 1972, 'US','EN', 9,'','Directed by Francis Ford Coppola'),
('Lawrence of Arabia', 1962, 'UK','EN',4, '',''),
('The Apartment', 1960, 'US','EN', 17, '',''),
('Planet of the Apes',1968, 'US','EN',1, '',''),
('The Graduate', 1967, 'US','EN', 17, '','Directed by	Mike Nichols'),
('Goldfinger', 1964,'UK,US','EN', 6, '',''),
('Spartacus', 1960,'US','EN', 18,'',''),
('Charade', 1963,'US','EN', 17,'',''),
('Breakfast at Tiffany''s',1961,'US','EN', 17,'','Directed by Blake Edwards'),
('La dolce vita',1960, 'IT','IT', 5, '','Directed by Federico Fellini'),
('Lolita', 1962, 'UK,US','EN', 5,'','Directed by Stanley Kubrick'),
('The Time Machine ',1960, 'US','EN', 1,'',''),
('A Fistful of Dollars',1964,'IT','IT', 3,'',''),
('Thunderball',1965,'US','EN',6, '',''),
('Scarface',1983,'US','EN',9,'','Directed by Brian De Palma'),
('Who Framed Roger Rabbit?',1988,'US','EN', 10,'',''),
('Amadeus', 1984,'US','EN', 18,'','Directed by	Milos Forman'),
('Full Metal Jacket', 1984,'US','EN', 13,'','Directed by	Stanley Kubrick'),
('Ghostbusters',1984,'US','EN', 17,'',''),
('Back to the Future',1985,'US','EN', 17,'',''),
('Aliens', 1986,'US','EN', 1,'',''),
('Once Upon a Time in America', 1984,'IT','IT', 9,'',''),
('Reds', 1981, 'US','EN', 17,'',''),
('The Elephant Man', 1980,'US','EN', 5,'Directed by David Lynch',''),
('The Terminator', 1984,'US','EN', 1,'Directed by James Cameron',''),
('E.T.: The Extra-Terrestrial', 1982,'US','EN', 1,'Directed by Steven Spielberg',''),
('Robocop', 1987,'US','EN', 1,'',''),
('The Shining', 1980,'US','EN', 2,'Directed by Stanley Kubrick',''),
('Sex, Lies and Videotape', 1989,'US','EN', 8,'',''),
('Raiders of the Lost Ark', 1981,'US','EN', 4,'',''),
('Blade Runner', 1982,'US','EN', 1,'',''),
('Raging Bull', 1980,'US','EN', 18,'',''),
('Rain Man', 1988,'US','EN', 5,'Directed by Barry Levinson',''),
('Platoon', 1986,'US','EN', 13,'Directed by	Oliver Stone',''),
('Gandhi', 1982,'UK,India','EN', 18,'Directed by Richard Attenborough','Oscar'),
('The Mission', 1986,'UK','EN', 5,'Directed by Roland Joffé',''),
('Crocodile Dundee', 1986, 'Australia,US','EN',4,'',''),
('the Matrix', 1999, 'US','EN',1,'Directed by The Wachowskis',''),
('The Fifth Element', 1997, 'FR','EN',1,'Directed by Luc Besson',''),
('Contact', 1997,'US','EN', 1,'Directed by Robert Zemeckis',''),
('Equilibrium', 2002,'US','EN', 1,'Directed by Kurt Wimmer',''),
('the Patriot', 2000,'US','EN', 1,'Directed by Roland Emmerich','Columbia Pictures'),
('Men of Honor', 2000,'US','EN', 1,'Directed by George Tillman Jr.','20th Century Fox'),
('Underworld', 2003,'US,UK, GE, Hungary','EN', 2,'','Directed by Len Wiseman'),
('Underworld: Evolution', 2006,'US','EN', 2,'','Directed by Len Wiseman'),
('Underworld: Rise of the Lycans', 2009,'US','EN', 2,'','Directed by Len Wiseman'),
('Underworld: Awakening', 2012,'US','EN', 2,'','Directed by	Måns Mårlind'),
('Underworld: Blood Wars', 2016,'US, Czech Republic','EN', 2,'','Directed by Anna Foerster'),
('The Last Samurai', 2003,'US, Japan','EN', 18,'','Directed by Edward Zwick'),
('The Matrix Resurrections', 2021,'US','EN', 1,'','Directed by Lana Wachowski'),
('the King', 20219,'US','EN', 18,'','Directed by David Michôd'),
('Leon: The Professional', 1994, 'US', 'EN', 18,'','Directed by Luc Besson'),
('The Family', 2013, 'FR,US', 'EN', 17, '','Directed by Luc Besson'),
('12 Angry Men', 1957,'US', 'EN',5, '','Directed by Sidney Lumet'),
('Troy', 2004,'US,UK,Malta', 'EN',18, '','Directed by Wolfgang Petersen'),
('La Dolce Vita', 1960, 'IT', 'IT',5,'','Directed by Federico Fellini'),
('La città delle donne', 1980, 'IT', 'IT',5,'','Directed by Federico Fellini'),
('La strada', 1954, 'IT', 'IT',5,'','Directed by Federico Fellini'),
('Scandal in Sorrento',1955, 'IT', 'IT',7,'','Directed by Dino Risi'),
('How Funny Can Sex Be?',1973, 'IT', 'IT',7,'','Directed by Dino Risi'),
('The Family',1987, 'IT', 'IT',17,'','Directed by Ettore Scola');

-- movieRoles
-- 'director'
-- 'producer'
-- 'executive producer'
-- 'art director'
-- 'star'
-- 'actor'
-- 'writer'
-- 'main actor'
-- 'soundtrack composer'

DELETE FROM movieRole;
INSERT INTO movieRole(firstname, lastname, role)
VALUES 
('Murray', 'Abraham', 'actor' ),
('Jean-Jacques', 'Annaud', 'director'),
('Robert Bernard', 'Altman','director'),
('Richard', 'Attenborough','director'),
('Christian', 'Bale', 'actor'),
('Michael', 'Bay', 'director'),
('Sean', 'Bean','actor' ),
('Warren', 'Beatty', 'actor' ),
('Luc', 'Besson', 'director'),
('John', 'Boorman', 'director'),
('Marlon' ,'Brando', 'actor' ),
('Charles', 'Bronson', 'actor' ),
('James', 'Caan','actor' ),
('Nicolas', 'Cage', 'actor'),
('Michael', 'Caine', 'actor'),
('Claudia', 'Cardinale','actress' ),
('Sean', 'Connery', 'actor'),
('Tom', 'Cruise','actor' ),
('Robert', 'Duvall','actor' ),
('William', 'Fichtner','actor'),
('David', 'Fincher', 'director'),
('Henry', 'Fonda','actor'),
('Harrison', 'Ford','actor'),
('Francis', 'Ford Coppola','director'),
('Milos', 'Forman','director'),
('Jodie', 'Foster','actress'),
('Morgan', 'Freeman','actor'),
('Anthony', 'Hopkins', 'actor'),
('Ed', 'Harris','actor'),
('Stanley', 'Kubrick','director'),
('Peter', 'Jackson','director'),
('Scarlett', 'Johansson','actress'),
('Milla', 'Jovovich','actress'),
('John', 'Huston','director'),
('Sergio', 'Leone', 'director'),
('Nino', 'Manfredi', 'actor'),
('Matthew' ,'McConaughey','actor' ),
('Malcolm', 'McDowell', 'actor'),
('Elizabeth', 'McGovern','actress'),
('Ennio', 'Morricone','sountrack composer'),
('Wolfgang', 'Petersen', 'director'),
('Christopher', 'Plummer','actor' ),
('Brad', 'Pitt','actor'), 
('Michelle', 'Pfeiffer','actress'),
('Natalie', 'Portman','actress'),
('Charlotte', 'Rampling','actress'),
('Jean', 'Reno', 'actor'),
('Keanu', 'Reeves','actor' ),
('Ridley', 'Scott','director'),
('Robert', 'De Niro','actor'),
('Steven', 'Spielberg','director'),
('',	'Vangelis', 'soundtrack composer'),
('Emily', 'Watson', 'actress'),
('Lana', 'Wachowski', 'director'), 
('Lilly', 'Wachowski', 'director'),
('Bruce', 'Willis', 'actor'),
('Kurt', 'Wimmer','director'),
('James', 'Woods', 'actor'),
('Giancarlo', 'Giannini', 'actor'),
('Laura', 'Antonelli','actress'),
('Armando', 'Trovajoli', 'sountrack composer'),
('Mickey', 'Rourke', 'actor'),
('Kevin', 'Costner','actor');

-- delete few entries from movie table
DELETE FROM movie
WHERE title IN ('The Apartment', 'Planet of the Apes', 'The Name of the Rose', 'The Rock') ;

INSERT INTO movie(title, released_year, origincountry, language, genres_id, description, note)
VALUES
('The Rock',1996, 'US','ENG',6,'Pentagon assigns a team comprising an FBI chemist and a former SAS captain with a team of SEALs to break into Alcatraz, where a rogue general and a rogue group of Marines have seized all the tourists on the island',''),
('The Name of the Rose', 1986, 'IT,GE,FR', 'IT', 8, 'century Franciscan monk William of Baskerville and his young novice arrive at a conference to find that several monks have been murdered under mysterious circumstances', ''),
('The Man Who Would Be King', 1975, 'UK,US', 'ENG', 4, 'adventure film',''),
('Per grazia ricevuta', 1971, 'IT', 'IT', 4, 'A young Italian wavers between faith and agnosticism, as he tries to sort out the mystiques of religion and sex', 'Directed by Nino Manfredi'),
('Fahrenheit 451', 1966, 'FR,UK', 'ENG', 1, 'science fiction', '');


-- store procedure to add a new movie
CREATE OR REPLACE PROCEDURE addMovie(
   _title            TEXT,
   _released_year    INT,
   _origincountry    CHAR(50),
   _language         CHAR(10),
   _genres_id        INT,
   _description      VARCHAR(255),
   _note             VARCHAR(255)
)
LANGUAGE SQL 
BEGIN ATOMIC
    -- insert into db movies, table movie
    INSERT INTO movie(title, released_year, origincountry, language, genres_id, description, note)
    VALUES( _title , _released_year , _origincountry , _language , _genres_id, _description, _note );
END;

CALL addMovie('Lucy', 2004, 'FR', 'ENG,FR', 1, 'science fiction', 'Directed by Luc Besson');
CALL addMovie('Toy Story', 1995, 'US', 'ENG', 10, '', '');
CALL addMovie('Good Will Hunting', 1997, 'US', 'ENG', 5, '', 'Directed by Gus Van Sant');
CALL addMovie('The Silence of the Lambs', 1997, 'US', 'ENG', 2, 'Starring Jodie Foster, Anthony Hopkins', 'Directed by Jonathan Demme');
CALL addMovie('Pretty Woman', 1997, 'US', 'ENG', 17, 'Starring Julia Roberts, Richard Gere', 'Directed by Garry Marshall');
CALL addMovie('Seven', 1995, 'US', 'ENG', 17, 'Starring Brad Pitt, Morgan Freeman', 'Directed by David Fincher');
CALL addMovie('The War of the Worlds', 1953, 'US', 'ENG', 1, '', 'Directed by Byron Haskin');
CALL addMovie('20,000 Leagues Under the Sea', 1954, 'US', 'ENG', 1, 'Produced by	Walt Disney', 'Directed by Richard Fleischer');
CALL addMovie('A Clockwork Orange', 1971, 'UK,US', 'ENG', 1, '', 'Directed by Stanley Kubrick');
CALL addMovie('Full Metal Jacket', 1987, 'UK,US', 'ENG', 1, '', 'Directed by Stanley Kubrick');
CALL addMovie('Angel Heart', 1987, 'UK,US', 'ENG', 2, '', 'Directed by Alan Parker');
CALL addMovie('The Untouchables', 1987, 'UK,US', 'ENG', 18, '', 'Directed by Brian De Palma');
CALL addMovie('Mr. Brooks',2007, 'UK,US', 'ENG', 8, '', 'Directed by Bruce A. Evans');
CALL addMovie('Dances with Wolves',1990, 'UK,US', 'ENG', 8, '', 'Directed by Kevin Costner');

-- create an audit table
DROP TABLE IF EXISTS movieAudit CASCADE;
CREATE TABLE movieAudit(
   movie_id          INT      NOT NULL,
   operation         char(1)   NOT NULL,
   title             text      NOT NULL,
   stamp             timestamp NOT NULL
);

CREATE OR REPLACE FUNCTION process_movieAudit() 
    RETURNS TRIGGER 
    LANGUAGE plpgsql
    AS $movieAudit$
    BEGIN
        --
        -- Create a row in movieAaudit to reflect  operation performed on movie,
        -- make use of the special variable TG_OP to work out the operation.
        --
        IF (TG_OP = 'DELETE') THEN
            INSERT INTO movieAudit (movie_id, operation,  title, stamp)
            VALUES(OLD.movie_id, 'D', OLD.title, now());
        ELSIF (TG_OP = 'UPDATE') THEN
           INSERT INTO movieAudit (movie_id, operation,  title, stamp)
           VALUES(OLD.movie_id, 'U', OLD.title, now());
        ELSIF (TG_OP = 'INSERT') THEN
             INSERT INTO movieAudit (movie_id, operation,  title, stamp)
             VALUES(OLD.movie_id, 'I', OLD.title, now());
        END IF;
        RETURN NULL; -- result is ignored since this is an AFTER trigger
    END;
$movieAudit$ ;

CREATE TRIGGER movieAudit
AFTER INSERT OR UPDATE OR DELETE ON movie
    FOR EACH ROW EXECUTE PROCEDURE process_movieAudit();


DELETE FROM movieCast;
INSERT INTO movieCast (movie_id, role_id)
VALUES 
((SELECT movie_id FROM movie WHERE title = 'The Good, the Bad and the Ugly'),(SELECT role_id FROM movieRole WHERE firstname = 'Sergio' and lastname = 'Leone')),
((SELECT movie_id FROM movie WHERE title = 'Full Metal Jacket'),(SELECT role_id FROM movieRole WHERE firstname = 'Stanley' and lastname = 'Kubrick')),
((SELECT movie_id FROM movie WHERE title = 'Equilibrium'),(SELECT role_id FROM movieRole WHERE firstname = 'Kurt' and lastname = 'Wimmer')),
((SELECT movie_id FROM movie WHERE title = 'Gandhi'),(SELECT role_id FROM movieRole WHERE firstname = 'Richard' and lastname = 'Attenborough')),
((SELECT movie_id FROM movie WHERE title = 'Seven'),(SELECT role_id FROM movieRole WHERE firstname = 'Brad' and lastname = 'Pitt')),
((SELECT movie_id FROM movie WHERE title = 'Seven'),(SELECT role_id FROM movieRole WHERE firstname = 'Morgan' and lastname = 'Freeman')),
((SELECT movie_id FROM movie WHERE title = 'Seven'),(SELECT role_id FROM movieRole WHERE firstname = 'David' and lastname = 'Fincher')),
((SELECT movie_id FROM movie WHERE title = 'The Fifth Element'),(SELECT role_id FROM movieRole WHERE firstname = 'Luc' and lastname = 'Besson')),
((SELECT movie_id FROM movie WHERE title = 'The Fifth Element'),(SELECT role_id FROM movieRole WHERE firstname = 'Bruce' and lastname = 'Willis')),
((SELECT movie_id FROM movie WHERE title = 'Zardoz'),(SELECT role_id FROM movieRole WHERE firstname = 'Sean' and lastname = 'Connery')),
((SELECT movie_id FROM movie WHERE title = 'Zardoz'),(SELECT role_id FROM movieRole WHERE firstname = 'John' and lastname = 'Boorman')),
((SELECT movie_id FROM movie WHERE title = 'Zardoz'),(SELECT role_id FROM movieRole WHERE firstname = 'Charlotte' and lastname = 'Rampling')),
((SELECT movie_id FROM movie WHERE title = 'The Silence of the Lambs'),(SELECT role_id FROM movieRole WHERE firstname = 'Jodie' and lastname = 'Foster')),
((SELECT movie_id FROM movie WHERE title = 'The Silence of the Lambs'),(SELECT role_id FROM movieRole WHERE firstname = 'Anthony' and lastname = 'Hopkins')),
((SELECT movie_id FROM movie WHERE title = 'The Godfather'),(SELECT role_id FROM movieRole WHERE firstname = 'Robert' and lastname = 'Duvall')),
((SELECT movie_id FROM movie WHERE title = 'The Godfather'),(SELECT role_id FROM movieRole WHERE firstname = 'Francis' and lastname = 'Ford Coppola')),
((SELECT movie_id FROM movie WHERE title = 'Blade Runner'),(SELECT role_id FROM movieRole WHERE firstname = 'Harrison' and lastname = 'Ford')),
((SELECT movie_id FROM movie WHERE title = 'Blade Runner'),(SELECT role_id FROM movieRole WHERE firstname = '' and lastname = 'Vangelis')),
((SELECT movie_id FROM movie WHERE title = 'Amadeus'),(SELECT role_id FROM movieRole WHERE firstname = 'Milos' and lastname = 'Forman')),
((SELECT movie_id FROM movie WHERE title = 'Amadeus'),(SELECT role_id FROM movieRole WHERE firstname = 'Murray' and lastname = 'Abraham')),
((SELECT movie_id FROM movie WHERE title = 'Contact'),(SELECT role_id FROM movieRole WHERE firstname = 'Jodie' and lastname = 'Foster')),
((SELECT movie_id FROM movie WHERE title = 'The Rock'),(SELECT role_id FROM movieRole WHERE firstname = 'Michael' and lastname = 'Bay')), 
((SELECT movie_id FROM movie WHERE title = 'The Rock'),(SELECT role_id FROM movieRole WHERE firstname = 'Sean' and lastname = 'Connery')),
((SELECT movie_id FROM movie WHERE title = 'The Rock'),(SELECT role_id FROM movieRole WHERE firstname = 'Nicolas' and lastname = 'Cage')),
((SELECT movie_id FROM movie WHERE title = 'The Rock'),(SELECT role_id FROM movieRole WHERE firstname = 'Ed' and lastname = 'Harris')),
((SELECT movie_id FROM movie WHERE title = 'Per grazia ricevuta'),(SELECT role_id FROM movieRole WHERE firstname = 'Nino' and lastname = 'Manfredi')),
((SELECT movie_id FROM movie WHERE title = 'Once Upon a Time in America'),(SELECT role_id FROM movieRole WHERE firstname = 'Robert' and lastname = 'De Niro')),
((SELECT movie_id FROM movie WHERE title = 'Once Upon a Time in America'),(SELECT role_id FROM movieRole WHERE firstname = 'James' and lastname = 'Woods')),
((SELECT movie_id FROM movie WHERE title = 'Once Upon a Time in America'),(SELECT role_id FROM movieRole WHERE firstname = 'Elizabeth' and lastname = 'McGovern')),
((SELECT movie_id FROM movie WHERE title = 'Once Upon a Time in America'),(SELECT role_id FROM movieRole WHERE firstname = 'Ennio' and lastname = 'Morricone')),
((SELECT movie_id FROM movie WHERE title = 'Once Upon a Time in America'),(SELECT role_id FROM movieRole WHERE firstname = 'Sergio' and lastname = 'Leone')),
((SELECT movie_id FROM movie WHERE title = 'Goldfinger'),(SELECT role_id FROM movieRole WHERE firstname = 'Sean' and lastname = 'Connery')),
((SELECT movie_id FROM movie WHERE title = 'The Man Who Would Be King'),(SELECT role_id FROM movieRole WHERE firstname = 'Sean' and lastname = 'Connery')),	  	 
((SELECT movie_id FROM movie WHERE title = 'The Man Who Would Be King'),(SELECT role_id FROM movieRole WHERE firstname = 'John' and lastname = 'Huston')),
((SELECT movie_id FROM movie WHERE title = 'The Man Who Would Be King'),(SELECT role_id FROM movieRole WHERE firstname = 'Michael' and lastname = 'Caine')),
((SELECT movie_id FROM movie WHERE title = 'The Man Who Would Be King'),(SELECT role_id FROM movieRole WHERE firstname = 'Christopher' and lastname = 'Plummer')),
((SELECT movie_id FROM movie WHERE title = 'Troy'),(SELECT role_id FROM movieRole WHERE firstname = 'Brad' and lastname = 'Pitt')),
((SELECT movie_id FROM movie WHERE title = 'Troy'),(SELECT role_id FROM movieRole WHERE firstname = 'Wolfgang' and lastname = 'Petersen')),
((SELECT movie_id FROM movie WHERE title = 'Lucy'),(SELECT role_id FROM movieRole WHERE firstname = 'Luc' and lastname = 'Besson')),
((SELECT movie_id FROM movie WHERE title = 'Lucy'),(SELECT role_id FROM movieRole WHERE firstname = 'Scarlett' and lastname = 'Johansson')),
((SELECT movie_id FROM movie WHERE title = 'Lucy'),(SELECT role_id FROM movieRole WHERE firstname = 'Morgan' and lastname = 'Freeman')),
((SELECT movie_id FROM movie WHERE title = 'A Clockwork Orange'),(SELECT role_id FROM movieRole WHERE firstname = 'Malcolm' and lastname = 'McDowell')),
((SELECT movie_id FROM movie WHERE title = 'A Clockwork Orange'),(SELECT role_id FROM movieRole WHERE firstname = 'Stanley' and lastname = 'Kubrick')),	
((SELECT movie_id FROM movie WHERE title = 'Full Metal Jacket'),(SELECT role_id FROM movieRole WHERE firstname = 'Stanley' and lastname = 'Kubrick')),	
((SELECT movie_id FROM movie WHERE title = 'Angel Heart'),(SELECT role_id FROM movieRole WHERE firstname = 'Robert' and lastname = 'De Niro')),
((SELECT movie_id FROM movie WHERE title = 'Angel Heart'),(SELECT role_id FROM movieRole WHERE firstname = 'Charlotte' and lastname = 'Rampling')),
((SELECT movie_id FROM movie WHERE title = 'Angel Heart'),(SELECT role_id FROM movieRole WHERE firstname = 'Mickey' and lastname = 'Rourke')),
((SELECT movie_id FROM movie WHERE title = 'The Untouchables'),(SELECT role_id FROM movieRole WHERE firstname = 'Sean' and lastname = 'Connery')),
((SELECT movie_id FROM movie WHERE title = 'The Untouchables'),(SELECT role_id FROM movieRole WHERE firstname = 'Kevin' and lastname = 'Costner')),	
((SELECT movie_id FROM movie WHERE title = 'The Untouchables'),(SELECT role_id FROM movieRole WHERE firstname = 'Robert' and lastname = 'De Niro')),
((SELECT movie_id FROM movie WHERE title = 'Mr. Brooks'),(SELECT role_id FROM movieRole WHERE firstname = 'Kevin' and lastname = 'Costner')),
((SELECT movie_id FROM movie WHERE title = 'Dances with Wolves'),(SELECT role_id FROM movieRole WHERE firstname = 'Kevin' and lastname = 'Costner'));


CREATE OR REPLACE FUNCTION random_between(low INT ,high INT) 
   RETURNS INT AS
$$
BEGIN
   RETURN floor(random()* (high-low + 1) + low);
END;
$$ language plpgsql STRICT;

-- delete all the raws in the movieRating table
-- assign to each movie a rate and number ot rating
DELETE FROM movieRating;
DO $$
DECLARE 
   i integer;
BEGIN 
   FOR i IN (SELECT movie_id from movie) LOOP
      INSERT INTO movieRating(movie_id,rate, num_rate)
      VALUES 
        ( 
          i,random_between(1,10), random_between(1,100)
        );
   END LOOP;
END $$;

-- update the note in the table movie
UPDATE movie 
SET note = 'spaghetti western' 
WHERE movie_id = (SELECT movie_id FROM movie WHERE title = 'The Good, the Bad and the Ugly');

-- update the note in the table movie
UPDATE movie
SET note = 'the trilogy' 
WHERE movie_id = (SELECT movie_id FROM movie WHERE title = 'the Matrix');


